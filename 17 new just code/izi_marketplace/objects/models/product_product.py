# -*- coding: utf-8 -*-
# Copyright 2023 IZI PT Solusi Usaha Mudah

from odoo import api, fields, models, _
from odoo.osv import expression
import re
from odoo.exceptions import ValidationError
from base64 import b64encode
import requests


class Product(models.Model):
    _inherit = 'product.product'

    generated_by_mapping = fields.Boolean(string="Generated by Mapping?", default=False)
    product_map_ref = fields.Char(string="Product Map Ref.", readonly=True)
    variant_name = fields.Char(string="Variant Name")
    mp_price = fields.Float('Marketplace Price', compute='_compute_marketplace_price')
    
    @api.depends_context('mp_account')
    def _compute_marketplace_price(self):
        mp_account = None
        if 'mp_account' in self._context:
            mp_account = self.env['mp.account'].browse(self._context['mp_account'])

        for rec in self:
            mp_price = 0.0
            domain = [('product_id', '=', rec.id)]
            if mp_account:
                domain.append((('mp_account_id', '=', mp_account.id),))
            map_line_ids = self.env['mp.map.product.line'].sudo().search(domain)
            if map_line_ids:
                prices = map_line_ids.mapped('mp_product_variant_id').filtered(lambda r:r.list_price).mapped('list_price')
                if prices:
                    avg_price = sum(prices) / float(len(prices))
                    mp_price = avg_price
            rec.mp_price = mp_price
                        
    def _compute_product_price_extra(self):
        for product in self:
            product.price_extra = sum(product.product_template_attribute_value_ids.mapped('price_extra'))
            if (not product.price_extra) and (not product.list_price) and product.mp_price:
                product.price_extra = product.mp_price - product.list_price

    @api.depends('name', 'variant_name')
    def name_get(self):
        result = []
        for rec in self:
            name = super(Product, rec).name_get()[0][1]
            if rec.variant_name:
                name = rec.variant_name
            result.append((rec.id, name))
        return result

    @api.model
    def _name_search(self, name, args=None, operator='ilike', limit=100, name_get_uid=None):
        product_ids = super(Product, self)._name_search(
            name, args=args, operator=operator, limit=limit, name_get_uid=name_get_uid)
        if operator == 'ilike' and not (name or '').strip():
            domain = []
        elif operator in ('ilike', 'like', '=', '=like', '=ilike'):
            domain = expression.AND([
                args or [],
                ['|', ('id', 'in', product_ids), ('variant_name', operator, name)]
            ])
            product_ids = self._search(domain, limit=limit, access_rights_uid=name_get_uid)
        return product_ids
    
    def set_mp_data(self, **kw):
        if self.ids:
            str_ids = [str(self_id) for self_id in self.ids]
            if kw.get('mp_account_ids'):
                mp_ids = [str(mp_id) for mp_id in kw['mp_account_ids'].ids]
                self._cr.execute('''
                    select
                        id
                    from
                        mp_map_product_line
                    where
                        product_id in (%s)
                    and
                        mp_account_id in (%s)
                ''' % (','.join(str_ids), ','.join(mp_ids)))
            else:
                self._cr.execute('select id from mp_map_product_line where product_id in (%s)' % (','.join(str_ids)))
        elif kw.get('skip_error'):
            return False
        else:
            raise ValidationError('Marketplace Product not mapped yet.')
        map_line_ids = kw.get('map_line_ids', self.env['mp.map.product.line'].sudo().browse([
            sql_map_line_id[0] for sql_map_line_id in self._cr.fetchall()
        ]))
        wiz_lines = []
        wiz_activations = []
        wiz_default_lines = []

        # Get Stock From Warehouse
        mp_accounts = map_line_ids.mapped('mp_account_id')
        for mp_account in mp_accounts:
            warehouse = mp_account.warehouse_id
            if not warehouse:
                raise ValidationError('Please set Warehouse for Marketplace Account %s' % (mp_account.name))

        for map_line_id in map_line_ids:
            new_price = map_line_id.mp_product_id.list_price or map_line_id.product_id.lst_price or 0.0
            new_stock = map_line_id.mp_product_variant_id.stock or map_line_id.mp_product_id.stock or 0
            # Get Stock
            new_stock = map_line_id.product_id.with_context(warehouse=mp_account.warehouse_id.id).qty_available
            # Get Pricelist Item For Wholesale
            wholesale_values = []
            product = map_line_id.product_id

            # pricelist_items = self.env['product.pricelist.item'].search([('pricelist_id', 'in', map_line_id.mp_account_id.pricelist_ids.ids), ('compute_price', '=', 'fixed'), ('min_quantity', '>', 0), '|', ('product_id', '=', product.id), ('product_tmpl_id', '=', product.product_tmpl_id.id),])
            # for pricelist_item in pricelist_items:
            #     if pricelist_item.min_quantity > 1:
            #         wholesale_values.append((0, 0, {
            #             'min_qty': pricelist_item.min_quantity,
            #             'price': pricelist_item.fixed_price,
            #         }))
            #     elif pricelist_item.min_quantity == 1:
            #         new_price = pricelist_item.fixed_price
                
            if map_line_id.mp_product_id:
                wiz_line = (0, 0, {
                    'mp_product_id': 'mp.product,%s' % (map_line_id.mp_product_id.id),
                    'price': map_line_id.product_id \
                        and map_line_id.product_id.lst_price \
                        or map_line_id.mp_product_id.list_price or 0.0,
                    'stock': map_line_id.mp_product_id.stock or 0,
                })
                wiz_lines.append(wiz_line)
                wiz_default_line = {
                    'mp_product_id': 'mp.product,%s' % (map_line_id.mp_product_id.id),
                    'new_price': new_price,
                    'new_stock': new_stock,
                    'price': map_line_id.mp_product_id.list_price,
                    'stock': map_line_id.mp_product_id.stock or 0,
                    'sku': map_line_id.mp_product_id.default_code,
                }
                wiz_default_line['original_values'] = str(wiz_default_line)
                wiz_default_lines.append((0, 0, wiz_default_line))

            if map_line_id.mp_product_variant_id:
                wiz_line = (0, 0, {
                    'mp_product_id': 'mp.product.variant,%s' % (map_line_id.mp_product_variant_id.id),
                    'price': map_line_id.product_id \
                        and map_line_id.product_id.lst_price \
                        or map_line_id.mp_product_variant_id.list_price or 0.0,
                    'stock': map_line_id.mp_product_variant_id.stock or 0,
                })
                wiz_lines.append(wiz_line)
                wiz_default_line = {
                    'mp_product_id': 'mp.product.variant,%s' % (map_line_id.mp_product_variant_id.id),
                    'new_price': new_price,
                    'new_stock': new_stock,
                    'price': map_line_id.mp_product_variant_id.list_price or map_line_id.mp_product_id.list_price,
                    'stock': map_line_id.mp_product_variant_id.stock or 0,
                    'sku': map_line_id.mp_product_variant_id.default_code,
                }
                wiz_default_line['original_values'] = str(wiz_default_line)
                wiz_default_lines.append((0, 0, wiz_default_line))
       
        # for map_line_id in map_line_ids:
        #     if map_line_id.mp_product_id:
        #         wiz_line = (0, 0, {
        #             'mp_product_id': 'mp.product,%s' % (map_line_id.mp_product_id.id),
        #             'price': map_line_id.product_id \
        #                 and map_line_id.product_id.lst_price \
        #                 or map_line_id.mp_product_id.list_price or 0.0,
        #             'stock': map_line_id.product_id and map_line_id.product_id.qty_available or 0,
        #         })
        #         wiz_lines.append(wiz_line)
        #         wiz_activations.append({
        #             'mp_product_id': map_line_id.mp_product_id.id,
        #             'activate': map_line_id.mp_product_id.active
        #             })
        #     if map_line_id.mp_product_variant_id:
        #         wiz_line = (0, 0, {
        #             'mp_product_id': 'mp.product.variant,%s' % (map_line_id.mp_product_variant_id.id),
        #             'price': map_line_id.product_id \
        #                 and map_line_id.product_id.lst_price \
        #                 or map_line_id.mp_product_variant_id.list_price or 0.0,
        #             'stock': map_line_id.product_id and map_line_id.product_id.qty_available or 0,
        #         })
        #         wiz_lines.append(wiz_line)
        #         wiz_activations.append({
        #                 'mp_product_id': map_line_id.mp_product_variant_id.mp_product_id.id,
        #                 'activate': map_line_id.mp_product_variant_id.mp_product_id.active
        #             })
        detail_data = {}
        if map_line_ids:
            mp_product_ids = []
            for map_line_id in map_line_ids:
                mp_product_ids.append(map_line_id.mp_product_id.id or map_line_id.mp_product_variant_id.mp_product_id.id)
            map_line_id = map_line_ids[0]
            mp_pd_id = map_line_id.mp_product_id or map_line_id.mp_product_variant_id.mp_product_id
            detail_data['mp_product_ids'] = [(6, 0, mp_product_ids)]
            detail_data['name'] = mp_pd_id.name or map_line_id.product_id.name
            detail_data['description'] = mp_pd_id.description_sale or map_line_id.product_id.description_sale
            detail_data['sku'] = (map_line_id.product_id.product_variant_count <= 1) \
                and mp_pd_id.default_code or map_line_id.product_id.default_code
            # detail_data['condition'] = map_line_id.mp_product_id
            detail_data['weight'] =  mp_pd_id.weight or map_line_id.product_id.weight
            detail_data['height'] = mp_pd_id.height
            detail_data['width'] = mp_pd_id.width
            detail_data['length'] = mp_pd_id.length
            detail_data['wholesale_ids'] = [(0, 0, {
                'min_qty': mp_product_wholesale_id.min_qty,
                'price': mp_product_wholesale_id.price,
            }) for mp_product_wholesale_id in mp_pd_id.mp_product_wholesale_ids]
            detail_data['image_ids'] = [(0, 0, {
                'sequence': image_id.sequence,
                'image': b64encode(requests.get(image_id.name).content),
            }) for image_id in mp_pd_id.mp_product_image_ids]
            if len(map_line_ids) > 1:
                detail_data['variant_ids'] = [(0, 0, {
                    'mp_product_variant_id': var.mp_product_variant_id.id, 
                    'sku': var.mp_product_variant_id.default_code, 
                    'mp_external_id': var.mp_product_variant_id.mp_external_id
                }) for var in map_line_ids]
        else:
            raise ValidationError('Product not exist in this Marketplace.')
        wiz = self.env['wiz.mp.product.update'].create({
            **{
                'mp_account_ids': [(6, 0, map_line_ids.mapped('mp_account_id').ids)],
                'line_ids': wiz_lines,
                'default_line_ids': wiz_default_lines,
                'activation_ids': [(0, 0, {
                    'mp_product_id': wiz_activation['mp_product_id'],
                    'activate': wiz_activation['activate']
                    }) for wiz_activation in wiz_activations],
            }, **detail_data
        })
        return {
            'name': _('Marketplace Product Update Wizard'),
            'view_mode': 'form',
            'res_model': 'wiz.mp.product.update',
            'view_id': self.env.ref('izi_marketplace.view_wiz_mp_product_update').id,
            'type': 'ir.actions.act_window',
            'res_id': wiz.id,
            'context': dict(self.env.context or {}),
            'target': 'new'
        }
